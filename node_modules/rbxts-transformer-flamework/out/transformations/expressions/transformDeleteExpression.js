"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformDeleteExpression = transformDeleteExpression;
var diagnostics_1 = require("../../classes/diagnostics");
var factory_1 = require("../../util/factory");
var getIndexExpression_1 = require("../../util/functions/getIndexExpression");
var isAttributesAccess_1 = require("../../util/functions/isAttributesAccess");
function transformDeleteExpression(state, node) {
    if ((0, isAttributesAccess_1.isAttributesAccess)(state, node.expression)) {
        var name_1 = (0, getIndexExpression_1.getIndexExpression)(node.expression);
        if (!name_1)
            diagnostics_1.Diagnostics.error(node.expression, "could not get index expression");
        if (!factory_1.f.is.accessExpression(node.expression.expression))
            diagnostics_1.Diagnostics.error(node.expression, "assignments not supported with direct access");
        var attributeSetter = state.addFileImport(node.getSourceFile(), "@flamework/components/out/baseComponent", "SYMBOL_ATTRIBUTE_SETTER");
        var thisAccess = node.expression.expression.expression;
        return factory_1.f.call(factory_1.f.field(thisAccess, attributeSetter, true), [name_1, factory_1.f.nil()]);
    }
    return node;
}
