-- Compiled with roblox-ts v3.0.0
local TS = _G[script]
local RunService = TS.import(script, TS.getModule(script, "@rbxts", "services")).RunService
--[[
	*
	 * Metadata exposed by the Flamework transformer.
	 
]]
local Metadata = {}
do
	local _container = Metadata
	--[[
		*
		     * Runtime metadata generated by the transformer
		     
	]]
	--[[
		*
		     * Runtime metadata generated by the transformer
		     
	]]
	--[[
		*
		     * Runtime metadata generated by the transformer
		     
	]]
	local function getContainer(name)
		local current = script
		while current do
			local flamework = current:FindFirstChild("flamework")
			if flamework then
				local metadata = flamework:FindFirstChild(name)
				if metadata then
					return require(metadata)
				end
			end
			current = current.Parent
		end
	end
	local configContainer
	local function getConfig(packageId)
		local _result
		if packageId == nil then
			local _result_1 = configContainer
			if _result_1 ~= nil then
				_result_1 = _result_1.game
			end
			_result = _result_1
		else
			local _result_1 = configContainer
			if _result_1 ~= nil then
				local _packages = _result_1.packages
				local _packageId = packageId
				_result_1 = _packages[_packageId]
			end
			_result = _result_1
		end
		return _result
	end
	configContainer = getContainer("config")
	_container.configContainer = configContainer
	local globContainer = getContainer("globs")
	_container.globContainer = globContainer
	local _result = configContainer
	if _result ~= nil then
		_result = _result.game
	end
	local _condition = _result
	if _condition == nil then
		_condition = {}
	end
	local gameConfig = _condition
	_container.gameConfig = gameConfig
	local function getGlob(glob, packageId)
		local _result_1
		if packageId == nil then
			local _result_2 = globContainer
			if _result_2 ~= nil then
				_result_2 = _result_2.game
			end
			_result_1 = _result_2
		else
			local _result_2 = globContainer
			if _result_2 ~= nil then
				local _packages = _result_2.packages
				local _packageId = packageId
				_result_2 = _packages[_packageId]
			end
			_result_1 = _result_2
		end
		local globs = _result_1
		local _result_2 = globs
		if _result_2 ~= nil then
			local _glob = glob
			_result_2 = _result_2[_glob]
		end
		return _result_2
	end
	_container.getGlob = getGlob
	local function getLogLevel(packageId)
		local config = getConfig(packageId)
		if not config or config.logLevel == nil then
			return "none"
		end
		return config.logLevel
	end
	_container.getLogLevel = getLogLevel
	local function isProfiling(packageId)
		local config = getConfig(packageId)
		if not config or config.profiling == nil then
			return RunService:IsStudio()
		end
		return config.profiling
	end
	_container.isProfiling = isProfiling
end
return {
	Metadata = Metadata,
}
